{"ast":null,"code":"const API_URL = 'http://localhost:3000/api';\nexport const api = {\n  // Employees\n  getEmployees: async () => fetch(`${API_URL}/employees`).then(res => res.json()),\n  addEmployee: async employee => fetch(`${API_URL}/employees`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(employee)\n  }).then(res => res.json()),\n  deleteEmployee: async id => fetch(`${API_URL}/employees/${id}`, {\n    method: 'DELETE'\n  }).then(res => res.json()),\n  // Medicines\n  getMedicines: async () => fetch(`${API_URL}/medicines`).then(res => res.json()),\n  addMedicine: async medicine => fetch(`${API_URL}/medicines`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(medicine)\n  }).then(res => res.json()),\n  updateMedicine: async (id, medicine) => fetch(`${API_URL}/medicines/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(medicine)\n  }).then(res => res.json()),\n  deleteMedicine: async id => fetch(`${API_URL}/medicines/${id}`, {\n    method: 'DELETE'\n  }).then(res => res.json()),\n  // Sales\n  getSales: async () => fetch(`${API_URL}/sales`).then(res => res.json()),\n  addSale: async sale => fetch(`${API_URL}/sales`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(sale)\n  }).then(res => res.json())\n};","map":{"version":3,"names":["API_URL","api","getEmployees","fetch","then","res","json","addEmployee","employee","method","headers","body","JSON","stringify","deleteEmployee","id","getMedicines","addMedicine","medicine","updateMedicine","deleteMedicine","getSales","addSale","sale"],"sources":["/home/samuel/development/PMS/Pharmacy v2/medicare/src/api/index.ts"],"sourcesContent":["import { Employee, Medicine, Sale } from '../types';\n\nconst API_URL = 'http://localhost:3000/api';\n\nexport const api = {\n  // Employees\n  getEmployees: async (): Promise<Employee[]> =>\n    fetch(`${API_URL}/employees`).then(res => res.json()),\n  \n  addEmployee: async (employee: Omit<Employee, 'id'>): Promise<{ id: number }> =>\n    fetch(`${API_URL}/employees`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(employee),\n    }).then(res => res.json()),\n  \n  deleteEmployee: async (id: number): Promise<{ success: boolean }> =>\n    fetch(`${API_URL}/employees/${id}`, {\n      method: 'DELETE',\n    }).then(res => res.json()),\n\n  // Medicines\n  getMedicines: async (): Promise<Medicine[]> =>\n    fetch(`${API_URL}/medicines`).then(res => res.json()),\n  \n  addMedicine: async (medicine: Omit<Medicine, 'id'>): Promise<{ id: number }> =>\n    fetch(`${API_URL}/medicines`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(medicine),\n    }).then(res => res.json()),\n  \n  updateMedicine: async (id: number, medicine: Omit<Medicine, 'id'>): Promise<{ success: boolean }> =>\n    fetch(`${API_URL}/medicines/${id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(medicine),\n    }).then(res => res.json()),\n  \n  deleteMedicine: async (id: number): Promise<{ success: boolean }> =>\n    fetch(`${API_URL}/medicines/${id}`, {\n      method: 'DELETE',\n    }).then(res => res.json()),\n\n  // Sales\n  getSales: async (): Promise<Sale[]> =>\n    fetch(`${API_URL}/sales`).then(res => res.json()),\n  \n  addSale: async (sale: Omit<Sale, 'id' | 'date'>): Promise<{ success: boolean }> =>\n    fetch(`${API_URL}/sales`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(sale),\n    }).then(res => res.json()),\n};"],"mappings":"AAEA,MAAMA,OAAO,GAAG,2BAA2B;AAE3C,OAAO,MAAMC,GAAG,GAAG;EACjB;EACAC,YAAY,EAAE,MAAAA,CAAA,KACZC,KAAK,CAAC,GAAGH,OAAO,YAAY,CAAC,CAACI,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;EAEvDC,WAAW,EAAE,MAAOC,QAA8B,IAChDL,KAAK,CAAC,GAAGH,OAAO,YAAY,EAAE;IAC5BS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ;EAC/B,CAAC,CAAC,CAACJ,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;EAE5BQ,cAAc,EAAE,MAAOC,EAAU,IAC/BZ,KAAK,CAAC,GAAGH,OAAO,cAAce,EAAE,EAAE,EAAE;IAClCN,MAAM,EAAE;EACV,CAAC,CAAC,CAACL,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;EAE5B;EACAU,YAAY,EAAE,MAAAA,CAAA,KACZb,KAAK,CAAC,GAAGH,OAAO,YAAY,CAAC,CAACI,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;EAEvDW,WAAW,EAAE,MAAOC,QAA8B,IAChDf,KAAK,CAAC,GAAGH,OAAO,YAAY,EAAE;IAC5BS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACK,QAAQ;EAC/B,CAAC,CAAC,CAACd,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;EAE5Ba,cAAc,EAAE,MAAAA,CAAOJ,EAAU,EAAEG,QAA8B,KAC/Df,KAAK,CAAC,GAAGH,OAAO,cAAce,EAAE,EAAE,EAAE;IAClCN,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACK,QAAQ;EAC/B,CAAC,CAAC,CAACd,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;EAE5Bc,cAAc,EAAE,MAAOL,EAAU,IAC/BZ,KAAK,CAAC,GAAGH,OAAO,cAAce,EAAE,EAAE,EAAE;IAClCN,MAAM,EAAE;EACV,CAAC,CAAC,CAACL,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;EAE5B;EACAe,QAAQ,EAAE,MAAAA,CAAA,KACRlB,KAAK,CAAC,GAAGH,OAAO,QAAQ,CAAC,CAACI,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;EAEnDgB,OAAO,EAAE,MAAOC,IAA+B,IAC7CpB,KAAK,CAAC,GAAGH,OAAO,QAAQ,EAAE;IACxBS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACU,IAAI;EAC3B,CAAC,CAAC,CAACnB,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC;AAC7B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}