{"ast":null,"code":"const API_URL='http://localhost:3000/api';export const api={// Auth\nlogin:async(username,password)=>fetch(`${API_URL}/login`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({username,password})}).then(res=>res.json()),// Employees\ngetEmployees:async()=>fetch(`${API_URL}/employees`).then(res=>res.json()),addEmployee:async employee=>fetch(`${API_URL}/employees`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(employee)}).then(res=>res.json()),deleteEmployee:async id=>fetch(`${API_URL}/employees/${id}`,{method:'DELETE'}).then(res=>res.json()),// Medicines\ngetMedicines:async()=>fetch(`${API_URL}/medicines`).then(res=>res.json()),addMedicine:async medicine=>fetch(`${API_URL}/medicines`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(medicine)}).then(res=>res.json()),updateMedicine:async(id,medicine)=>fetch(`${API_URL}/medicines/${id}`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(medicine)}).then(res=>res.json()),deleteMedicine:async id=>fetch(`${API_URL}/medicines/${id}`,{method:'DELETE'}).then(res=>res.json()),// Sales\ngetSales:async(startDate,endDate)=>{const params=new URLSearchParams();if(startDate)params.append('startDate',startDate);if(endDate)params.append('endDate',endDate);return fetch(`${API_URL}/sales?${params}`).then(res=>res.json());},addSale:async sale=>fetch(`${API_URL}/sales`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(sale)}).then(res=>res.json()),// Reports\ngetReport:async(type,startDate,endDate)=>{const params=new URLSearchParams({type,...(startDate&&{startDate}),...(endDate&&{endDate})});return fetch(`${API_URL}/reports?${params}`).then(res=>res.json());}};","map":{"version":3,"names":["API_URL","api","login","username","password","fetch","method","headers","body","JSON","stringify","then","res","json","getEmployees","addEmployee","employee","deleteEmployee","id","getMedicines","addMedicine","medicine","updateMedicine","deleteMedicine","getSales","startDate","endDate","params","URLSearchParams","append","addSale","sale","getReport","type"],"sources":["/home/samuel/development/PMS/Pharmacy v2/medicare/src/api/index.ts"],"sourcesContent":["const API_URL = 'http://localhost:3000/api';\n\nexport const api = {\n  // Auth\n  login: async (username: string, password: string): Promise<{ success: boolean; role: string }> =>\n    fetch(`${API_URL}/login`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username, password }),\n    }).then(res => res.json()),\n\n  // Employees\n  getEmployees: async () =>\n    fetch(`${API_URL}/employees`).then(res => res.json()),\n  \n  addEmployee: async (employee: any) =>\n    fetch(`${API_URL}/employees`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(employee),\n    }).then(res => res.json()),\n  \n  deleteEmployee: async (id: number) =>\n    fetch(`${API_URL}/employees/${id}`, {\n      method: 'DELETE',\n    }).then(res => res.json()),\n\n  // Medicines\n  getMedicines: async () =>\n    fetch(`${API_URL}/medicines`).then(res => res.json()),\n  \n  addMedicine: async (medicine: any) =>\n    fetch(`${API_URL}/medicines`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(medicine),\n    }).then(res => res.json()),\n  \n  updateMedicine: async (id: number, medicine: any) =>\n    fetch(`${API_URL}/medicines/${id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(medicine),\n    }).then(res => res.json()),\n  \n  deleteMedicine: async (id: number) =>\n    fetch(`${API_URL}/medicines/${id}`, {\n      method: 'DELETE',\n    }).then(res => res.json()),\n\n  // Sales\n  getSales: async (startDate?: string, endDate?: string) => {\n    const params = new URLSearchParams();\n    if (startDate) params.append('startDate', startDate);\n    if (endDate) params.append('endDate', endDate);\n    return fetch(`${API_URL}/sales?${params}`).then(res => res.json());\n  },\n  \n  addSale: async (sale: any) =>\n    fetch(`${API_URL}/sales`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(sale),\n    }).then(res => res.json()),\n\n  // Reports\n  getReport: async (type: string, startDate?: string, endDate?: string) => {\n    const params = new URLSearchParams({\n      type,\n      ...(startDate && { startDate }),\n      ...(endDate && { endDate }),\n    });\n    return fetch(`${API_URL}/reports?${params}`).then(res => res.json());\n  },\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}