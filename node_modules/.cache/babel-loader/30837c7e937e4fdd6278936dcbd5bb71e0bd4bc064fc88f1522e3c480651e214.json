{"ast":null,"code":"const API_URL = 'http://localhost:3000/api';\nexport const api = {\n  // Auth\n  login: async (username, password) => fetch(`${API_URL}/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  }).then(res => res.json()),\n  // Employees\n  getEmployees: async () => fetch(`${API_URL}/employees`).then(res => res.json()),\n  addEmployee: async employee => fetch(`${API_URL}/employees`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(employee)\n  }).then(res => res.json()),\n  deleteEmployee: async id => fetch(`${API_URL}/employees/${id}`, {\n    method: 'DELETE'\n  }).then(res => res.json()),\n  // Medicines\n  getMedicines: async () => {\n    try {\n      const response = await fetch(`${API_URL}/medicines`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch medicines');\n      }\n      return response.json();\n    } catch (error) {\n      console.error(error); // Log the error for debugging\n      throw error; // Rethrow error for handling in the component\n    }\n  },\n  addMedicine: async medicine => {\n    try {\n      const response = await fetch(`${API_URL}/medicines`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(medicine)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add medicine');\n      }\n      return response.json();\n    } catch (error) {\n      console.error(error);\n      throw error; // Rethrow error for handling in the component\n    }\n  },\n  updateMedicine: async (id, medicine) => {\n    try {\n      const response = await fetch(`${API_URL}/medicines/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(medicine)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update medicine');\n      }\n      return response.json();\n    } catch (error) {\n      console.error(error);\n      throw error; // Rethrow error for handling in the component\n    }\n  },\n  deleteMedicine: async id => {\n    try {\n      const response = await fetch(`${API_URL}/medicines/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete medicine');\n      }\n      return response.json();\n    } catch (error) {\n      console.error(error);\n      throw error; // Rethrow error for handling in the component\n    }\n  },\n  // Sales\n  getSales: async (startDate, endDate) => {\n    const params = new URLSearchParams();\n    if (startDate) params.append('startDate', startDate);\n    if (endDate) params.append('endDate', endDate);\n    return fetch(`${API_URL}/sales?${params}`).then(res => res.json());\n  },\n  addSale: async sale => {\n    try {\n      const response = await fetch(`${API_URL}/sales`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(sale)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add sale');\n      }\n      return response.json();\n    } catch (error) {\n      console.error(error);\n      throw error; // Rethrow error for handling in the component\n    }\n  },\n  // Reports\n  getReport: async (type, startDate, endDate) => {\n    const params = new URLSearchParams({\n      type,\n      ...(startDate && {\n        startDate\n      }),\n      ...(endDate && {\n        endDate\n      })\n    });\n    return fetch(`${API_URL}/reports?${params}`).then(res => res.json());\n  }\n};","map":{"version":3,"names":["API_URL","api","login","username","password","fetch","method","headers","body","JSON","stringify","then","res","json","getEmployees","addEmployee","employee","deleteEmployee","id","getMedicines","response","ok","Error","error","console","addMedicine","medicine","updateMedicine","deleteMedicine","getSales","startDate","endDate","params","URLSearchParams","append","addSale","sale","getReport","type"],"sources":["/home/samuel/development/PMS/Pharmacy v2/medicare/src/api/index.ts"],"sourcesContent":["const API_URL = 'http://localhost:3000/api';\n\nexport const api = {\n  // Auth\n  login: async (username: string, password: string): Promise<{ success: boolean; role: string }> =>\n    fetch(`${API_URL}/login`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username, password }),\n    }).then(res => res.json()),\n\n  // Employees\n  getEmployees: async () =>\n    fetch(`${API_URL}/employees`).then(res => res.json()),\n  \n  addEmployee: async (employee: any) =>\n    fetch(`${API_URL}/employees`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(employee),\n    }).then(res => res.json()),\n  \n  deleteEmployee: async (id: number) =>\n    fetch(`${API_URL}/employees/${id}`, {\n      method: 'DELETE',\n    }).then(res => res.json()),\n\n  // Medicines\n  getMedicines: async () => {\n    try {\n      const response = await fetch(`${API_URL}/medicines`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch medicines');\n      }\n      return response.json();\n    } catch (error) {\n      console.error(error); // Log the error for debugging\n      throw error; // Rethrow error for handling in the component\n    }\n  },\n  \n  addMedicine: async (medicine: any) => {\n    try {\n      const response = await fetch(`${API_URL}/medicines`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(medicine),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add medicine');\n      }\n      return response.json();\n    } catch (error) {\n      console.error(error);\n      throw error; // Rethrow error for handling in the component\n    }\n  },\n  \n  updateMedicine: async (id: number, medicine: any) => {\n    try {\n      const response = await fetch(`${API_URL}/medicines/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(medicine),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update medicine');\n      }\n      return response.json();\n    } catch (error) {\n      console.error(error);\n      throw error; // Rethrow error for handling in the component\n    }\n  },\n  \n  deleteMedicine: async (id: number) => {\n    try {\n      const response = await fetch(`${API_URL}/medicines/${id}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete medicine');\n      }\n      return response.json();\n    } catch (error) {\n      console.error(error);\n      throw error; // Rethrow error for handling in the component\n    }\n  },\n\n  // Sales\n  getSales: async (startDate?: string, endDate?: string) => {\n    const params = new URLSearchParams();\n    if (startDate) params.append('startDate', startDate);\n    if (endDate) params.append('endDate', endDate);\n    return fetch(`${API_URL}/sales?${params}`).then(res => res.json());\n  },\n  \n  addSale: async (sale: any) => {\n    try {\n      const response = await fetch(`${API_URL}/sales`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(sale),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add sale');\n      }\n      return response.json();\n    } catch (error) {\n      console.error(error);\n      throw error; // Rethrow error for handling in the component\n    }\n  },\n\n  // Reports\n  getReport: async (type: string, startDate?: string, endDate?: string) => {\n    const params = new URLSearchParams({\n      type,\n      ...(startDate && { startDate }),\n      ...(endDate && { endDate }),\n    });\n    return fetch(`${API_URL}/reports?${params}`).then(res => res.json());\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}