{"ast":null,"code":"const API_URL = 'http://localhost:3000/api';\nexport const api = {\n  // Auth\n  login: async (username, password) => fetch(`${API_URL}/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  }).then(res => res.json()),\n  // Employees\n  getEmployees: async () => fetch(`${API_URL}/employees`).then(res => res.json()),\n  addEmployee: async employee => fetch(`${API_URL}/employees`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(employee)\n  }).then(res => res.json()),\n  deleteEmployee: async id => fetch(`${API_URL}/employees/${id}`, {\n    method: 'DELETE'\n  }).then(res => res.json()),\n  // Medicines\n  getMedicines: async () => fetch(`${API_URL}/medicines`).then(res => res.json()),\n  addMedicine: async medicine => fetch(`${API_URL}/medicines`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(medicine)\n  }).then(res => res.json()),\n  updateMedicine: async (id, medicine) => fetch(`${API_URL}/medicines/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(medicine)\n  }).then(res => res.json()),\n  deleteMedicine: async id => fetch(`${API_URL}/medicines/${id}`, {\n    method: 'DELETE'\n  }).then(res => res.json()),\n  // Sales\n  getSales: async (startDate, endDate) => {\n    const params = new URLSearchParams();\n    if (startDate) params.append('startDate', startDate);\n    if (endDate) params.append('endDate', endDate);\n    return fetch(`${API_URL}/sales?${params}`).then(res => res.json());\n  },\n  addSale: async sale => fetch(`${API_URL}/sales`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(sale)\n  }).then(res => res.json()),\n  // Reports\n  getReport: async (type, startDate, endDate) => {\n    const params = new URLSearchParams({\n      type,\n      ...(startDate && {\n        startDate\n      }),\n      ...(endDate && {\n        endDate\n      })\n    });\n    return fetch(`${API_URL}/reports?${params}`).then(res => res.json());\n  }\n};","map":{"version":3,"names":["API_URL","api","login","username","password","fetch","method","headers","body","JSON","stringify","then","res","json","getEmployees","addEmployee","employee","deleteEmployee","id","getMedicines","addMedicine","medicine","updateMedicine","deleteMedicine","getSales","startDate","endDate","params","URLSearchParams","append","addSale","sale","getReport","type"],"sources":["/home/samuel/development/PMS/Pharmacy v2/medicare/src/api/index.ts"],"sourcesContent":["const API_URL = 'http://localhost:3000/api';\n\nexport const api = {\n  // Auth\n  login: async (username: string, password: string): Promise<{ success: boolean; role: string }> =>\n    fetch(`${API_URL}/login`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username, password }),\n    }).then(res => res.json()),\n\n  // Employees\n  getEmployees: async () =>\n    fetch(`${API_URL}/employees`).then(res => res.json()),\n  \n  addEmployee: async (employee: any) =>\n    fetch(`${API_URL}/employees`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(employee),\n    }).then(res => res.json()),\n  \n  deleteEmployee: async (id: number) =>\n    fetch(`${API_URL}/employees/${id}`, {\n      method: 'DELETE',\n    }).then(res => res.json()),\n\n  // Medicines\n  getMedicines: async () =>\n    fetch(`${API_URL}/medicines`).then(res => res.json()),\n  \n  addMedicine: async (medicine: any) =>\n    fetch(`${API_URL}/medicines`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(medicine),\n    }).then(res => res.json()),\n  \n  updateMedicine: async (id: number, medicine: any) =>\n    fetch(`${API_URL}/medicines/${id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(medicine),\n    }).then(res => res.json()),\n  \n  deleteMedicine: async (id: number) =>\n    fetch(`${API_URL}/medicines/${id}`, {\n      method: 'DELETE',\n    }).then(res => res.json()),\n\n  // Sales\n  getSales: async (startDate?: string, endDate?: string) => {\n    const params = new URLSearchParams();\n    if (startDate) params.append('startDate', startDate);\n    if (endDate) params.append('endDate', endDate);\n    return fetch(`${API_URL}/sales?${params}`).then(res => res.json());\n  },\n  \n  addSale: async (sale: any) =>\n    fetch(`${API_URL}/sales`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(sale),\n    }).then(res => res.json()),\n\n  // Reports\n  getReport: async (type: string, startDate?: string, endDate?: string) => {\n    const params = new URLSearchParams({\n      type,\n      ...(startDate && { startDate }),\n      ...(endDate && { endDate }),\n    });\n    return fetch(`${API_URL}/reports?${params}`).then(res => res.json());\n  },\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}